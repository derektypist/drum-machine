{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SOUNDS","Q","W","E","A","S","D","Z","X","C","DrumMachine","props","handleKey","event","toPlay","document","getElementById","play","setDisplay","state","display","padColor","displayColor","playAudio","bind","build","btn","target","id","e","this","Object","keys","currentTime","url","parseInt","hit","rgb","Math","floor","random","style","background","setTimeout","setIt","theHit","setState","map","i","index","name","src","color","onClick","onKeyDown","tabIndex","className","React","Component","Info","DrumPad","giveID","source","Clip","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99823c63.chunk.js","sourcesContent":["import React from 'react';\n\n\n/*\nSOURCES\n‘http://soundbible.com/716-Drum-Roll.html’\n‘http://soundbible.com/1085-Halogen-Light.html’\n‘http://soundbible.com/1317-Sci-Fi-Robot.html’\n‘http://soundbible.com/2000-City-Centre.html’\n‘http://soundbible.com/2218-Service-Bell-Help.html’\n‘http://soundbible.com/835-Pen-Clicking.html’\n‘http://soundbible.com/1698-Public-Transit-Bus.html’\n‘http://soundbible.com/1817-Party-Horn.html’\n\nTaken from Steven Youhana - Originally Accessed 12 February 2020\n*/\n\n// Define Constant\n\nconst SOUNDS = [\n  { Q: 'Drum-Roll-SoundBible.com-1599301580.mp3' },\n  { W: 'Halogen Light-SoundBible.com-1664817471.mp3' },\n  { E: 'Sci-Fi-Robot-SoundBible.com-481033379.mp3' },\n  { A: 'City_Centre-Hopeinawe-377331566.mp3' },\n  { S: 'service-bell_daniel_simion.mp3' },\n  { D: 'Pen-Clicking-SoundBible.com-482574858.mp3' },\n  { Z: 'Public-Transit-Bus-SoundBible.com-671541921.mp3' },\n  { X: 'party_horn-Mike_Koenig-76599891.mp3' },\n  { C: 'Typewriter-SoundBible.com-285954942.mp3' }\n];\n\n// Set Up Components\n\nclass DrumMachine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: \"Novice Drummer\",\n      padColor: 'yellow',\n      displayColor: 'lime'\n    };\n\n    this.toPlay = null;\n    this.playAudio = this.playAudio.bind(this);\n    this.setDisplay = this.setDisplay.bind(this);\n    this.build = null;\n\n  }\n\n  playAudio(btn) {\n    if (btn.target.id >= 0 && btn.target.id <= 8) {\n      this.toPlay = document.getElementById(Object.keys(SOUNDS[btn.target.id]));\n      this.toPlay.currentTime = 0;\n      for (const e in SOUNDS) {\n        if (e === btn.target.id) this.url = SOUNDS[btn.target.id];\n        this.toPlay.play();\n      }\n    }\n    this.setDisplay(parseInt(btn.target.id, 10));\n  }\n\n  setDisplay(hit) {\n    if (hit >= 0 && hit <= 8) {\n      let rgb = [Math.floor(Math.random() * 254), Math.floor(Math.random() * 254), Math.floor(Math.random() * 254)];\n      document.getElementById(\"display\").style.background = `rgb(${rgb[1]},${rgb[0]},${rgb[2]})`;\n      document.getElementById(\"view\").style.background = `rgb(${rgb[0]},${rgb[1]},${rgb[2]})`;\n      document.getElementById(hit).style.background = 'white';\n    }\n    setTimeout(() => {\n      document.getElementById(hit).style.background = 'yellow';\n    }, 200);\n\n    let setIt = (theHit) => {\n      // console.log(theHit);\n      this.setState({\n        display: theHit\n      });\n    };\n\n    switch (hit) {\n      case 0:\n        setIt('Drum Roll');\n        break;\n      case 1:\n        setIt('Halogen Light');\n        break;\n      case 2:\n        setIt('Sci Fi Robot');\n        break;\n      case 3:\n        setIt('City Centre');\n        break;\n      case 4:\n        setIt('Service Bell');\n        break;\n      case 5:\n        setIt('Pen Clicking');\n        break;\n      case 6:\n        setIt('Public Transit Bus');\n        break;\n      case 7:\n        setIt('Party Horn');\n        break;\n      case 8:\n        setIt('Typewriter');\n        break;\n      default:\n        setIt('You Rock!');\n        break;\n    }\n  }\n\n  handleKey = (event) => {\n    // eslint-disable-next-line\n    switch (event) {\n      case SOUNDS[0]:\n        this.toPlay = document.getElementById('Q');\n        this.toPlay.play();\n        this.setDisplay(0);\n        break;\n      case SOUNDS[1]:\n        this.toPlay = document.getElementById('W');\n        this.toPlay.play();\n        this.setDisplay(1);\n        break;\n      case SOUNDS[2]:\n        this.toPlay = document.getElementById('E');\n        this.toPlay.play();\n        this.setDisplay(2);\n        break;\n      case SOUNDS[3]:\n        this.toPlay = document.getElementById('A');\n        this.toPlay.play();\n        this.setDisplay(3);\n        break;\n      case SOUNDS[4]:\n        this.toPlay = document.getElementById('S');\n        this.toPlay.play();\n        this.setDisplay(4);\n        break;\n      case SOUNDS[5]:\n        this.toPlay = document.getElementById('D');\n        this.toPlay.play();\n        this.setDisplay(5);\n        break;\n      case SOUNDS[6]:\n        this.toPlay = document.getElementById('Z');\n        this.toPlay.play();\n        this.setDisplay(6);\n        break;\n      case SOUNDS[7]:\n        this.toPlay = document.getElementById('X');\n        this.toPlay.play();\n        this.setDisplay(7);\n        break;\n      case SOUNDS[8]:\n        this.toPlay = document.getElementById('C');\n        this.toPlay.play();\n        this.setDisplay(8);\n        break;\n    }\n\n  }\n\n  componentWillMount() {\n    this.build = SOUNDS.map((e, i) => {\n      return <DrumPad index={i} name={Object.keys(e)} playAudio={this.playAudio} src={e[Object.keys(e)]} color={this.state.padColor}/>;\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"drum-machine\" onClick={this.playAudio} onKeyDown={this.handleKey} tabIndex=\"0\" >\n      <Info />\n        <div id=\"display\">\n          <h2 className='text-center'>{this.state.display}</h2>\n        </div> \n        <div id=\"view\">\n          <div id=\"btn-group\" className=\"text-center\">\n             {this.build}\n          </div>\n        </div>\n    </div>\n    );\n  }\n}\n\nconst Info = () => {\n  return (\n    <div id=\"nav\" className=\"text-center\"><h1>Drum Machine</h1></div>\n  );\n};\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.src = null;\n  }\n  render() {\n    return (\n      <div id={this.props.index} className=\"drum-pad\" onClick={this.props.playAudio} \n             style={{background: this.props.color}}>\n        {this.props.name}\n          <Clip className=\"clip\" giveID={this.props.name} source={this.props.src}/>\n    </div>\n    );\n  }\n}\n\nclass Clip extends React.Component {\n  // eslint-disable-next-line\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n    <audio className =\"clip\" id={this.props.giveID} src={this.props.source}>\n    </audio>\n    );\n    }\n  }\n\nexport default DrumMachine;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport DrumMachine from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DrumMachine />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}